name: Actions Whitelist PR Validation

on:
  pull_request:
    paths:
      - 'whitelist/actions.yml'
    types: [opened, synchronize, reopened]

permissions:
  contents: read
  pull-requests: write

jobs:
  validate-whitelist-changes:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Get changed actions
        id: changes
        uses: actions/github-script@v7
        with:
          result-encoding: string
          script: |
            const fs = require('fs');
            const yaml = require('yaml');
            const { owner, repo } = context.repo;
            
            const addPRComment = async (message) => {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.payload.pull_request.number,
                body: message
              });
            };
            
            try {
              // Read the PR changes for actions.yml
              const baseFile = await github.rest.repos.getContent({
                owner,
                repo,
                path: 'whitelist/actions.yml',
                ref: context.payload.pull_request.base.sha
              });
              
              const prFile = await github.rest.repos.getContent({
                owner,
                repo,
                path: 'whitelist/actions.yml',
                ref: context.payload.pull_request.head.sha
              });
              
              // Parse and normalize the YAML content
              const parseAndNormalizeContent = (content) => {
                try {
                  const parsedContent = yaml.parse(content);
                  
                  // Ensure allowedActions is an array
                  if (!parsedContent || !Array.isArray(parsedContent.allowedActions)) {
                    throw new Error('allowedActions must be an array');
                  }
                  
                  // Validate each action entry
                  parsedContent.allowedActions.forEach((action, index) => {
                    if (!action.name) {
                      throw new Error(`Action at index ${index} is missing required 'name' field`);
                    }
                  });
                  
                  return parsedContent;
                } catch (parseError) {
                  // Make YAML parsing error more explicit about potential indentation issues
                  const errorMessage = parseError.message.toLowerCase().includes('bad indentation')
                    ? `YAML parsing error: Invalid indentation detected. Please check that all entries are properly indented with spaces, not tabs. Details: ${parseError.message}`
                    : `YAML parsing error: ${parseError.message}. Please verify the YAML structure and indentation`;
                  throw new Error(errorMessage);
                }
              };

              const baseContent = parseAndNormalizeContent(Buffer.from(baseFile.data.content, 'base64').toString());
              const prContent = parseAndNormalizeContent(Buffer.from(prFile.data.content, 'base64').toString());

              // Find new or modified actions
              const baseActions = new Set(baseContent.allowedActions.map(a => a.name));
              const newActions = prContent.allowedActions.filter(a => !baseActions.has(a.name));
              
              // Return the stringified array directly
              return JSON.stringify(newActions.map(a => a.name));
              
            } catch (error) {
              const errorMessage = `Error processing actions.yml: ${error.message}`;
              // Add a comment to the PR explaining the error
              await addPRComment(`❌ **Action Processing Error**\n\n${errorMessage}\n\nPlease fix the issues and update your pull request.`);
              core.setFailed(errorMessage);
              core.setOutput('error', error.message);
              throw error; // This will stop the workflow
            }

      - name: Validate changes
        id: validation
        run: |
          # Parse the JSON array from previous step
          NEW_ACTIONS='${{ steps.changes.outputs.result }}'
          
          if [ "$NEW_ACTIONS" = "[]" ]; then
            echo "No new actions to validate"
            echo "validation_status=success" >> $GITHUB_ENV
            exit 0
          fi
          
          # Parse the JSON array and validate each action
          echo "$NEW_ACTIONS" | jq -r '.[]' | while read -r action; do
            echo "Validating action: $action"
            if ! npm run validate-action -- "$action"; then
              echo "::error::Validation failed for action: $action"
              echo "validation_status=failure" >> $GITHUB_ENV
              exit 1
            fi
          done
          
          echo "validation_status=success" >> $GITHUB_ENV

      - name: Update PR status
        if: always()
        uses: actions/github-script@v7
        with:
          script: |
            const validation = process.env.validation_status;
            const error = process.env.validation_error || '';
            
            if (validation === 'success') {
              await github.rest.pulls.createReview({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: context.payload.pull_request.number,
                body: '✅ Security validation passed. This PR can be merged after security team review.',
                event: 'COMMENT'
              });
            } else {
              // Get the error message from the steps output
              const jobSteps = await github.rest.actions.listJobsForWorkflowRun({
                owner: context.repo.owner,
                repo: context.repo.repo,
                run_id: context.runId
              });
              
              const currentJob = jobSteps.data.jobs.find(job => job.name === 'validate-whitelist-changes');
              const failedStep = currentJob?.steps?.find(step => step.conclusion === 'failure');
              
              let errorMessage = '❌ Security validation failed.';
              
              // Find the specific output from the failed step
              const getStepOutput = (step) => {
                if (!step?.outputs) return '';
                // For steps using github-script, the output is in the 'error' output
                return step.outputs.error || step.outputs.stdout || '';
              };

              if (failedStep?.name === 'Get changed actions') {
                const stepOutput = getStepOutput(failedStep);
                errorMessage += '\n\n### YAML Validation Error\n' + 
                              'There was an error processing your actions.yml file:\n' +
                              '```\n' + stepOutput + '\n```\n\n' +
                              'Please check:\n' +
                              '- Your YAML syntax is correct\n' +
                              '- All entries are properly indented with spaces (not tabs)\n' +
                              '- All required fields are present\n' +
                              '- The `allowedActions` key contains a valid array';
              } else if (failedStep?.name === 'Validate changes') {
                errorMessage += '\n\n### Action Validation Error\n' +
                              'One or more actions failed security validation.\n' +
                              'Please check the workflow logs for specific details about which validations failed.';
              } else {
                errorMessage += ' Please check the workflow logs for details.';
              }
              
              await github.rest.pulls.createReview({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: context.payload.pull_request.number,
                body: errorMessage,
                event: 'REQUEST_CHANGES'
              });
            }
