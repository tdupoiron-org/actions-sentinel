name: Actions Whitelist PR Validation

on:
  pull_request:
    paths:
      - 'whitelist/actions.yml'
    types: [opened, synchronize, reopened]

permissions:
  contents: read
  pull-requests: write

jobs:
  validate-whitelist-changes:
    runs-on: ubuntu-latest
    steps:

      - name: Generate GitHub App Token
        id: generate-token
        uses: actions/create-github-app-token@v2
        with:
          app-id: ${{ vars.ACTIONS_SENTINEL_APP_ID }}
          private-key: ${{ secrets.ACTIONS_SENTINEL_APP_KEY }}

      - name: Checkout repository
        uses: actions/checkout@v5
        with:
          fetch-depth: 0
          token: ${{ steps.generate-token.outputs.token }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Get changed actions
        id: changes
        uses: actions/github-script@v7
        with:
          github-token: ${{ steps.generate-token.outputs.token }}
          result-encoding: string
          script: |
            const fs = require('fs');
            const yaml = require('yaml');
            const { owner, repo } = context.repo;
            
            const addPRComment = async (message) => {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.payload.pull_request.number,
                body: message
              });
            };
            
            try {
              // Read the PR changes for actions.yml
              const baseRef = context.payload.pull_request.base.sha;
              const prRef = context.payload.pull_request.head.sha;
              
              // Get base file content
              let baseContent;
              try {
                const baseFile = await github.rest.repos.getContent({
                  owner,
                  repo,
                  path: 'whitelist/actions.yml',
                  ref: baseRef
                });
                baseContent = Buffer.from(baseFile.data.content, 'base64').toString();
              } catch (error) {
                if (error.status === 404) {
                  // If file doesn't exist in base, use empty whitelist
                  baseContent = yaml.stringify({ allowedActions: [] });
                } else {
                  throw error;
                }
              }
              
              // Get PR file content
              const prFile = await github.rest.repos.getContent({
                owner,
                repo,
                path: 'whitelist/actions.yml',
                ref: prRef
              });
              const prContent = Buffer.from(prFile.data.content, 'base64').toString();
              
              // Parse and normalize the YAML content
              const parseAndNormalizeContent = (content) => {
                try {
                  const parsedContent = yaml.parse(content);
                  
                  // Ensure allowedActions is an array
                  if (!parsedContent || !Array.isArray(parsedContent.allowedActions)) {
                    throw new Error('allowedActions must be an array');
                  }
                  
                  // Validate each action entry
                  parsedContent.allowedActions.forEach((action, index) => {
                    if (!action.name) {
                      throw new Error(`Action at index ${index} is missing required 'name' field`);
                    }
                  });
                  
                  return parsedContent;
                } catch (parseError) {
                  // Make YAML parsing error more explicit about potential indentation issues
                  const errorMessage = parseError.message.toLowerCase().includes('bad indentation')
                    ? `YAML parsing error: Invalid indentation detected. Please check that all entries are properly indented with spaces, not tabs. Details: ${parseError.message}`
                    : `YAML parsing error: ${parseError.message}. Please verify the YAML structure and indentation`;
                  throw new Error(errorMessage);
                }
              };

              const parsedBaseContent = parseAndNormalizeContent(baseContent);
              const parsedPrContent = parseAndNormalizeContent(prContent);

              // Find new and removed actions
              const baseActions = new Set(parsedBaseContent.allowedActions.map(a => a.name));
              const prActions = new Set(parsedPrContent.allowedActions.map(a => a.name));
              
              const newActions = parsedPrContent.allowedActions.filter(a => !baseActions.has(a.name));
              const removedActions = parsedBaseContent.allowedActions.filter(a => !prActions.has(a.name));
              
              // Add a summary comment
              const changesSummary = [];
              if (newActions.length > 0) {
                changesSummary.push('### Added Actions 🆕\n' + newActions.map(a => `- \`${a.name}\``).join('\n'));
              }
              if (removedActions.length > 0) {
                changesSummary.push('### Removed Actions 🗑️\n' + removedActions.map(a => `- \`${a.name}\``).join('\n'));
              }
              if (changesSummary.length > 0) {
                await addPRComment('## Actions Whitelist Changes Summary\n\n' + changesSummary.join('\n\n'));
              } else {
                await addPRComment('## Actions Whitelist Changes Summary\n\nNo actions were added or removed in this PR.');
              }
              
              // Return only the new actions for validation
              return JSON.stringify(newActions.map(a => a.name));
              
            } catch (error) {
              const errorMessage = `Error processing actions.yml: ${error.message}`;
              // Add a comment to the PR explaining the error
              await addPRComment(`❌ **Action Processing Error**\n\n${errorMessage}\n\nPlease fix the issues and update your pull request.`);
              core.setFailed(errorMessage);
              core.setOutput('error', error.message);
              throw error; // This will stop the workflow
            }

      - name: Validate changes
        id: validation
        uses: actions/github-script@v7
        with:
          github-token: ${{ steps.generate-token.outputs.token }}
          script: |
            const NEW_ACTIONS = JSON.parse('${{ steps.changes.outputs.result }}');
            
            if (NEW_ACTIONS.length === 0) {
              console.log('No new actions to validate');
              await github.rest.pulls.createReview({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: context.payload.pull_request.number,
                body: '✅ No new actions to validate. This PR can be merged after security team review.',
                event: 'COMMENT'
              });
              return;
            }

            let validationFailed = false;
            let failedActions = [];
            
            // Validate each action's syntax
            for (const action of NEW_ACTIONS) {
              console.log(`Validating action: ${action}`);
              
              // Check if action name follows the format: owner/repo@ref
              const actionPattern = /^[a-zA-Z0-9-_]+\/[a-zA-Z0-9-_.]+@[a-zA-Z0-9-_.]+$/;
              if (!actionPattern.test(action)) {
                validationFailed = true;
                failedActions.push(action);
                console.error(`::error::Invalid action format: ${action}. Expected format: owner/repo@ref`);
              }
            }
            
            // Update PR based on validation results
            if (!validationFailed) {
              await github.rest.pulls.createReview({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: context.payload.pull_request.number,
                body: '✅ Action name syntax validation passed. This PR can be merged after security team review.',
                event: 'COMMENT'
              });
            } else {
              const errorMessage = `❌ Action name syntax validation failed.\n\n### Action Validation Error\n\nThe following actions have invalid syntax:\n${failedActions.map(a => `- \`${a}\` (expected format: owner/repo@ref)`).join('\n')}\n\nPlease update the action names to follow the correct format: owner/repo@ref`;
              
              await github.rest.pulls.createReview({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: context.payload.pull_request.number,
                body: errorMessage,
                event: 'REQUEST_CHANGES'
              });
              
              core.setFailed('Action name syntax validation failed');
            }
