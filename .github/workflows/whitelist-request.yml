name: Actions Whitelist Request Handler

on:
  issues:
    types: [opened, edited, reopened]

permissions:
  issues: write     # Needed for commenting and updating issues
  actions: write    # Needed for managing GitHub Actions settings
  contents: read    # Needed for checking out code

jobs:
  process-whitelist-request:
    runs-on: ubuntu-latest
    if: contains(github.event.issue.labels.*.name, 'actions-whitelist-request')
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Extract Action Reference
        id: extract
        uses: actions/github-script@v7
        with:
          script: |
            const issueBody = context.payload.issue.body;
            if (!issueBody) {
              throw new Error('Issue body is empty');
            }
            
            // Extract action reference between "### Action Reference" and the next section
            const actionRefMatch = issueBody.match(/### Action Reference\s*([^#]*)/);
            if (!actionRefMatch || !actionRefMatch[1].trim()) {
              throw new Error('Action Reference section not found or empty');
            }
            
            const actionRef = actionRefMatch[1].trim();
            console.log('Extracted Action Reference:', actionRef);
            return actionRef;
          result-encoding: string

      - name: Log Action Reference
        env:
          ACTION_REF: ${{ steps.extract.outputs.result }}
        run: |
          echo "Processing whitelist request for action: ${{ env.ACTION_REF }}"

      - name: Evaluate Action
        id: evaluate
        uses: ./sentinel
        with:
          action-name: ${{ steps.extract.outputs.result }}
          organization: ${{ github.repository_owner }}
          github-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Add Evaluation Results
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { data: comments } = await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: '## Security Evaluation Results\nAction evaluation completed. Check the workflow logs for details.'
            });

      - name: Update Issue Title
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            try {
              const actionRef = '${{ steps.extract.outputs.result }}'
              console.log('Updating issue title for:', {
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                actionRef: actionRef
              })
              
              await github.rest.issues.update({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                title: `[Action Whitelist Request] ${actionRef}`
              })
              
              console.log('Issue title updated successfully')
            } catch (error) {
              console.error('Failed to update issue title:', error)
              throw error
            }
