name: Actions Whitelist Request Handler

on:
  issues:
    types: [opened, edited, reopened]

permissions:
  issues: write     # Needed for commenting and updating issues
  actions: write    # Needed for managing GitHub Actions settings
  contents: read    # Needed for checking out code

jobs:
  process-whitelist-request:
    runs-on: ubuntu-latest
    if: contains(github.event.issue.labels.*.name, 'actions-whitelist-request')
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Extract Action Reference
        id: extract
        uses: actions/github-script@v7
        with:
          script: |
            const issueBody = context.payload.issue.body;
            if (!issueBody) {
              throw new Error('Issue body is empty');
            }
            
            // Extract action reference between "### Action Reference" and the next section
            const actionRefMatch = issueBody.match(/### Action Reference\s*([^#]*)/);
            if (!actionRefMatch || !actionRefMatch[1].trim()) {
              throw new Error('Action Reference section not found or empty');
            }
            
            const actionRef = actionRefMatch[1].trim();
            console.log('Extracted Action Reference:', actionRef);
            return actionRef;
          result-encoding: string

      - name: Log Action Reference
        env:
          ACTION_REF: ${{ steps.extract.outputs.result }}
        run: |
          echo "Processing whitelist request for action: ${{ env.ACTION_REF }}"
          
      - name: Update Issue Title
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            try {
              const actionRef = '${{ steps.extract.outputs.result }}'
              console.log('Updating issue title for:', {
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                actionRef: actionRef
              })
              
              await github.rest.issues.update({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                title: `[Action Whitelist Request] ${actionRef}`
              })

              console.log('Issue title updated successfully')
            } catch (error) {
              console.error('Failed to update issue title:', error)
              throw error
            }

      - name: Evaluate Action
        id: evaluate
        uses: ./sentinel
        with:
          action-name: ${{ steps.extract.outputs.result }}
          organization: ${{ github.repository_owner }}
          github-token: ${{ secrets.ACTION_WHITELIST_TOKEN }}

      - name: Add Evaluation Results
        uses: actions/github-script@v7
        if: always()
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          result-encoding: string
          script: |
            try {
              const actionRef = '${{ steps.extract.outputs.result }}';
              const evaluationStatus = '${{ steps.evaluate.outputs.status }}';
              const evaluationDetails = '${{ steps.evaluate.outputs.details }}';
              
              let evaluationResultObj;
              try {
                evaluationResultObj = JSON.parse('${{ steps.evaluate.outputs.result }}');
              } catch (e) {
                evaluationResultObj = { error: 'Could not parse evaluation results' };
              }
              
              let status, summary, icon;
              if (evaluationStatus === 'success') {
                status = 'Successfully Processed';
                summary = 'The action has been successfully evaluated and processed for whitelisting.';
                icon = '‚úÖ';
              } else if (evaluationStatus === 'failure') {
                status = 'Evaluation Failed';
                summary = evaluationResultObj.error || 'The action evaluation encountered issues that need to be addressed.';
                icon = '‚ö†Ô∏è';
              } else {
                status = 'Process Incomplete';
                summary = 'The action evaluation process did not complete as expected.';
                icon = '‚ùì';
              }

              const resultDetails = evaluationDetails || 'No additional details available';
              
              const checkmark = '‚úì';
              const bullet = '‚Ä¢';
              
              const commentBody = [
                `## Action Whitelist Evaluation ${icon}`,
                '',
                `**Status**: ${status}`,
                `**Action**: \`${actionRef}\``,
                '',
                summary,
                '',
                '```json',
                JSON.stringify(evaluationResultObj, null, 2),
                '```',
                '',
                resultDetails,
                '',
                evaluationStatus === 'success' 
                  ? '_This issue will be closed as the evaluation was successful._'
                  : '_Please address the issues above and update the issue to trigger a new evaluation._',
                '',
                '_Generated by Actions Sentinel_ ü§ñ'
              ].join('\n');

              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: commentBody
              });
              
              console.log('Evaluation results comment added successfully');
            } catch (error) {
              console.error('Failed to add evaluation results comment:', error);
              throw error;
            }

      - name: Close Issue if Successful
        uses: actions/github-script@v7
        if: success() && steps.evaluate.outputs.status == 'success'
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            try {
              await github.rest.issues.update({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                state: 'closed'
              });
              console.log('Issue closed successfully');
            } catch (error) {
              console.error('Failed to close issue:', error);
              throw error;
            }
